=pod

=encoding UTF-8

=head1 NAME

MooseX::Role::UserDaemon - Simplify writing of user space daemons

=head1 VERSION

version 0.05

=head1 SYNOPSIS

In your module:

  package YourApp;
  use Moose;
  with qw(MooseX::Role::UserDaemon);

  # MooseX::Role::UserDaemon requires the consuming class to implement main()
  sub main {
    my ($self) = @_;

    # the user have to implement capturing signals and exiting.
    my $run = 1;
    local $SIG{'INT'} = sub { $run = 0; };

    FOREVER_LOOP:
    while ($run) {
      ...
    }

    # It is recomended that main() return '0 but true' on success.
    # the return value of main is feed directly to exit()
    return '0 but true';
  }

In your script:

  use YourApp;
  my $app = YourApp->new;

  exit $app->run unless caller 0;

On the commanline:

  Start your app
  $ yourapp.pl start
    Starting...

  Check your status
  $ yourapp.pl status
    Running with PID: ...

  Stop your app
  $ yourapp.pl stop
    Stopping PID: ...

Or preferably in combination with MooseX::SimpleConfig and/or MooseX::Getopt
In your module:

  package YourApp;
  use Moose;

  # Enable use of configfile and commandline parameters as well
  with qw(MooseX::Role::UserDaemon MooseX::SimpleConfig MooseX::Getopt);

  # '+configfile' Only required when using MooseX::SimpleConfig
  has '+configfile' => (
    is      => 'ro',
    isa     => 'Str',
    default => sub {
      File::Spec->catdir( File::HomeDir->my_home, '.yourapp',
        'yourapp.conf' );
    },
    documentation => 'Use custom configfile.',   # Getopt use this description
  );

  # MooseX::Role::UserDaemon requires the consuming class to implement main()
  sub main {
    my ($self) = @_;

    # the user have to implement capturing signals and exiting.
    my $run = 1;
    local $SIG{'INT'} = sub { $run = 0; };

    FOREVER_LOOP:
    while ($run) {
      sleep 1; # This is where you place your code
    }
      
    # It is recomended that main() return '0 but true' on success.
    # the return value of main is feed directly to exit()
    return '0 but true';
  }

In your script:

  use YourApp;

  # use new_with_options when using Getopt/SimpleConfig
  my $app = YourApp->new_with_options;

  exit $app->run unless caller 0;

On the commanline:

  Start your app
  $ yourapp.pl start
    Starting...

  Check your status
  $ yourapp.pl status
    Running with PID: ...

  Stop your app
  $ yourapp.pl stop
    Stopping PID: ...

=head1 DESCRIPTION

This module aims to simplify implementation of daemons and apps ment to be run
for normal users. Not system wide services or servers.

B<< This module is not suited for implementing daemons running as root
or other system users. >>

When using this role your script will by default:

1. Create a hidden folder in the users home directory with the same
name as the script itself. So YourApp.pl will create a directory
~/.yourapp.pl

2. C<< chdir >> to this directory.

3. Daemonize by double forking.

4. Create a lockfile named lock and place a C<< flock >> on the file.
This lock  will be in place until the app shuts down.

5. Create a pidfile named pid.

6. run the C<< main() >> subroutine.

Five commands are implemented by default: status, start, stop, restart,
reload.

=head2 start (default)

Will launch the application according to the description above.

=head2 stop

Will read the pid from the pidfile and issue a C<< INT >> signal.

=head2 restart

Restart is the same as running stop then start again.

=head2 reload

Will read the pid from the pidfile and issue a C<< HUP >> signal.

=head2 status

Will read the pid from the pidfile and print to STDOUT.

=head1 ATTRIBUTES

=head2 _name

String. Defaults to script name, is used for setting a application folder name.

=head2 _valid_commands

Regexp. Default is C<< qr/status|start|stop|reload|restart/xms >>. Whitelist 
methods which can be called from the command line.

=head2 timeout

Integer. Default is 5. How much time in seconds it's expected to take after
shutting down the app by sending a C<< INT >> singal. This is used by
C<< stop >> to avoid waiting forever for the app to shut down.

=head2 foreground

Integer. Default is 0. If set to 1 the app will not daemonize/fork or redirect
STD* to /dev/null.

=head2 basedir

String. Default to an application folder in the users home directory. The app
will C<< chdir >> to this location during startup. This is where we will place 
lockfile, pidfile and other application files.

=head2 lockfile

String. Default to /basedir/lockfile

=head2 _lockfile_fh

Filehandle. Used for holding the lockfile filehandle while the app is running.

=head2 pidfile

String. Default to /basedir/pid

=head1 METHODS

=head2 run

C<< run() >> will determine which command was issued to the script,
defaults to I<< start >> if no command is given. By default the valid
commands are: status, start, stop, restart, reload

New commands can be added by the consuming class, it which case the
attribute C<< _valid_commands >> needs to be updated for C<< run() >>
to allow the command to be executed. C<< _valid_commands >> is a
RegexpRef and the default value is:
C<< qr/status|start|stop|reload|restart/ >>

You can set your own C<< _valid_commands >> in the consuming class, to allow 
for custom commands like this:

  has '+_valid_commands' => (
    default => sub {
      return qr/status|start|stop|restart|custom_command/xms
    },
  );

=head2 status

Checks if the app is running, print status to STDOUT.

=head2 start

C<< start() >> call C<< main() >> after checking that it is not running
and after forking (unless foreground mode is enabled).

=head2 stop

C<< stop() >> issues a C<< INT >> signal to the PID listed in the pidfile. It
is up to the author to trap this signal and end the application in an
orderly fashion.

=head2 restart

C<< restart() >> simply call C<< stop() >>, wait for the app to stop
and call C<< start() >>.

=head2 reload

C<< reload() >> issues a C<< HUP >> signal to the PID listed in the pidfile.
It is up to the author to trap this signal and do the appropriate
thing, usualy to reload configuration files.

=for Pod::Coverage LOCK_EX

=for Pod::Coverage LOCK_NB

=head1 AUTHOR

Tore Andersson <tore.andersson@gmail.com>

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2014 by Tore Andersson.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=cut
